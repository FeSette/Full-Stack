/*

O CSS Grid Layout é um sistema de layout bidimensional que permite criar layouts complexos de forma mais fácil e intuitiva. Ele divide a página em linhas e colunas, permitindo que você posicione os elementos de forma precisa.

## Propriedades fundamentais do CSS Grid:

Todo GRID é composto de 2 principais componentes: **Grid Container** e **Grid Items**.
- **Grid Container**: É o elemento pai que contém os itens do grid. Para definir um elemento como grid container, você usa a propriedade `display: grid;`.
- **Grid Items**: São os elementos filhos dentro do grid container. Eles são automaticamente tratados como itens de grid quando o elemento pai é definido como grid container.

Exemplo:

-- HTML:
<div id="grid-example">
    <div>1</div>
    <span>2</span>
    <span>3</span>
</div>

-- CSS:
#grid-example {
    display: grid; (ou display: inline-grid; para grids inline)
}

## Grids templates:
    .grid-template: É uma propriedade abreviada que combina `grid-template-rows`, `grid-template-columns` e `grid-template-areas`.

    .grid-template-columns: Define o número e o tamanho das colunas do grid.
    .grid-template-rows: Define o número e o tamanho das linhas do grid.
    .grid-template-areas: Define áreas nomeadas dentro do grid, permitindo um layout mais semântico e fácil de entender.

    -- Grid Template Columns:
    grid-template-columns: 100px 200px; (Define duas colunas, a primeira com 100px e a segunda com 200px)
    
    grid-template-columns: repeat(3, 1fr); (Define três colunas de tamanho igual)
    
    grid-template-columns: 1fr 2fr; (Define duas colunas, a primeira com 1 fração do espaço disponível e a segunda com 2 frações)

    -- Grid Template Rows:
    grid-template-rows: 100px 200px; (Define duas linhas, a primeira com 100px e a segunda com 200px)

    grid-template-rows: repeat(3, 1fr); (Define três linhas de tamanho igual)

    grid-template-rows: 1fr 2fr; (Define duas linhas, a primeira com 1 fração do espaço disponível e a segunda com 2 frações)

## Grid Column:

    .grid-column: É uma propriedade abreviada que combina `grid-column-start` e `grid-column-end`, definindo em quais colunas um item de grid deve começar e terminar.

    .grid-column-start: Define a coluna inicial onde o item de grid deve começar.
    .grid-column-end: Define a coluna final onde o item de grid deve terminar.
    .grid-column: 1 / 3; (O item começa na coluna 1 e termina na coluna 3, ocupando duas colunas)

## Grid Row:

    .grid-row: É uma propriedade abreviada que combina `grid-row-start` e `grid-row-end`, definindo em quais linhas um item de grid deve começar e terminar.

    .grid-row-start: Define a linha inicial onde o item de grid deve começar.
    .grid-row-end: Define a linha final onde o item de grid deve terminar.
    .grid-row: 1 / 3; (O item começa na linha 1 e termina na linha 3, ocupando duas linhas)

## Grid Template Areas:

    .grid-template-areas: Define áreas nomeadas dentro do grid, permitindo um layout mais semântico e fácil de entender. As áreas são definidas usando nomes entre aspas, e os itens do grid podem ser atribuídos a essas áreas.

    .grid-template-areas:
    "header header header"
    "main main aside"
    "footer footer footer";

    -- Atribuindo áreas aos itens do grid:
    .header {
        grid-area: header;
    }
    .main {
        grid-area: main;
    }
    .footer {
        grid-area: footer;
    }


*/