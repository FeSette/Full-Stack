/*

# Comentários e Anotações
    
    Utilizamos para criar comentários em CSS.
    Comentários são úteis para documentar o código e explicar o que cada parte faz.
    Eles não afetam a renderização do CSS e são ignorados pelo navegador.

# Anatomia do Código CSS

    - Seletor: Define o elemento HTML ao qual os estilos serão aplicados.
    - Propriedade: A característica do elemento que será estilizada (ex: cor, tamanho).
    - Valor: O valor atribuído à propriedade (ex: vermelho, 16px).
    - Declaração: A combinação de propriedade e valor (ex: color: red;).
    - Bloco de Declaração: Conjunto de declarações entre chaves, ex: 
    h1 { color: red;
      font-size: 16px;
      letter-spacing: 2px;
      text-transform: uppercase; 
    }

# Cascata / Hierarquia de regras

    - O CSS é chamado de Cascading Style Sheets porque as regras podem ser aplicadas em cascata.
    - A hierarquia de regras é determinada pela especificidade dos seletores e pela ordem em que aparecem.
    - Regras mais específicas têm prioridade sobre regras menos específicas.
    - Regras que aparecem por último têm prioridade sobre regras anteriores, se tiverem a mesma especificidade.
    - A ordem de prioridade é: inline styles > IDs > classes > elementos.
    - Exemplo de especificidade:
        - .classe { color: red; }  classe tem menor especificidade - PESO 10
        - #id { color: blue; }  id tem maior especificidade - PESO 100
        - h1 { color: green; }  elemento tem menor especificidade - PESO 1
        - Resultado: o elemento com id terá a cor azul.
    - Exemplo de cascata:
        - h1 { color: green; }  regra geral - PESO 1
        - .classe { color: red; }  regra específica - PESO 10
        - #id { color: blue; }  regra mais específica - PESO 100
        - Resultado: o h1 ficará azul.
    - Exemplo de ordem:
        - h1 { color: green; }  regra geral - PESO 1
        - h1 { color: red; }  regra mais específica, mas aparece depois - PESO 1
        - Resultado: o h1 ficará vermelho.

    - !important 
        - A declaração !important pode ser usada para forçar uma regra a ter prioridade sobre outras.
        - Exemplo: h1 { color: red !important; }  essa regra terá prioridade sobre outras regras.
        - Use com cautela, pois pode dificultar a manutenção do código.
        - Evite usar !important, a menos que seja absolutamente necessário.

# Valores e Unidades de Medidas

    - O CSS suporta várias unidades de medida, incluindo:
        - px: pixels (unidade fixa)
        - em: unidade relativa ao tamanho da fonte do elemento pai
        - rem: unidade relativa ao tamanho da fonte do elemento raiz (html)
        - %: porcentagem em relação ao elemento pai
        - vh: porcentagem da altura da viewport (janela de visualização)
        - vw: porcentagem da largura da viewport (janela de visualização)
    - Exemplo de uso de unidades:
        - font-size: 16px;  tamanho fixo
        - font-size: 1.5em;  tamanho relativo ao elemento pai
        - font-size: 1.5rem;  tamanho relativo ao elemento raiz
        - width: 50%;  largura em porcentagem
        - height: 100vh;  altura em porcentagem da viewport 
    - O CSS também suporta unidades de medida para espaçamento, como:
        - margin: 10px;  margem fixa
        - padding: 1em;  preenchimento relativo ao elemento pai
        - border-width: 2rem;  largura da borda relativa ao elemento raiz
        - line-height: 1.5;  altura da linha relativa ao tamanho da fonte
        - text-align: center;  alinhamento do texto
        - text-decoration: underline;  decoração do texto (sublinhado)
        - text-transform: uppercase;  transformação do texto (caixa alta)  

# Seletores CSS

    - Os seletores CSS são usados para selecionar os elementos HTML que serão estilizados.
    - Existem vários tipos de seletores, incluindo:
        - Seletor de elemento: seleciona todos os elementos de um tipo específico:
        p { 
            color: red; 
        }
        - Seletor de classe: seleciona todos os elementos com uma classe específica:
        .classe { 
            color: blue; 
        }
        - Seletor de ID: seleciona um elemento com um ID específico:        
        #id { 
            color: green; 
        }
        - Seletor de atributo: seleciona elementos com um atributo específico:
        [type="text"] { 
            color: yellow; 
        }
        - Seletor descendente: seleciona elementos dentro de outro elemento:
        div p { 
            color: orange; 
        }
        - Seletor filho direto: seleciona elementos que são filhos diretos de outro elemento:
        div > p { 
            color: purple; 
        }
        - Seletor adjacente: seleciona o próximo elemento irmão: 
        h1 + p {
            color: pink; 
        }
        - Seletor geral de irmãos: seleciona todos os irmãos seguintes: 
        h1 ~ p { 
            color: brown; 
        }
    - Exemplo de uso de seletores:
        - p { color: red; }  todos os parágrafos ficarão vermelhos
        - .classe { color: blue; }  todos os elementos com a classe "classe" ficarão azuis
        - #id { color: green; }  o elemento com o ID "id" ficará verde
        - [type="text"] { color: yellow; }  todos os elementos com o atributo type="text" ficarão amarelos
        - div p { color: orange; }  todos os parágrafos dentro de uma div ficarão laranja
        - div > p { color: purple; }  apenas os parágrafos filhos diretos de uma div ficarão roxos
        - h1 + p { color: pink; }  o próximo parágrafo após um h1 ficará rosa
        - h1 ~ p { color: brown; }  todos os parágrafos seguintes a um h1 ficarão marrons
    - Os seletores podem ser combinados para criar seletores mais específicos.
    - Exemplo de combinação de seletores:
        - div.classe { color: red; }  todos os elementos div com a classe "classe" ficarão vermelhos
        - #id .classe { color: blue; }  todos os elementos com a classe "classe" dentro do elemento com o ID "id" ficarão azuis
        - div > .classe { color: green; }  todos os elementos com a classe "classe" que são filhos diretos de uma div ficarão verdes

# Box Model

    - O modelo de caixa é a forma como o CSS representa os elementos na página.
    - Cada elemento é representado como uma caixa retangular, com as seguintes partes:
        - Conteúdo: o conteúdo real do elemento (texto, imagem, etc.)
        - Preenchimento (padding): o espaço entre o conteúdo e a borda do elemento
        - Borda (border): a linha que envolve o elemento
        - Margem (margin): o espaço entre o elemento e os outros elementos ao seu redor
    - Exemplo de uso do modelo de caixa:
        - width: 200px;  largura do conteúdo
        - height: 100px;  altura do conteúdo
        - padding: 10px;  preenchimento em todos os lados
        - border: 2px solid black;  borda de 2 pixels sólida e preta
        - margin: 20px;  margem em todos os lados
    - O modelo de caixa pode ser alterado usando a propriedade box-sizing:
        - box-sizing: content-box;  padrão, largura e altura incluem apenas o conteúdo
        - box-sizing: border-box;  largura e altura incluem o preenchimento e a borda
    - Exemplo de uso do box-sizing:
        - .caixa { 
            box-sizing: border-box; 
            width: 200px; 
            height: 100px; 
            padding: 10px; 
            border: 2px solid black; 
            margin: 20px; 
        }

    - Display: A propriedade display controla como um elemento é exibido na página.
        
        - block: o elemento ocupa toda a largura disponível e começa em uma nova linha.
            - Elementos: div, main, header, section, p, h...
        - inline: o elemento ocupa apenas o espaço necessário e não começa em uma nova linha.
            - Elementos: span, a, strong, em
        - inline-block: o elemento ocupa apenas o espaço necessário, mas permite definir largura e altura.
        - flex: o elemento se torna um contêiner flexível, permitindo layout flexível de seus filhos.
        - grid: o elemento se torna um contêiner de grade, permitindo layout em grade de seus filhos.
    
    - Border: A propriedade border define a borda de um elemento.

        - border: 2px solid black;  borda de 2 pixels sólida e preta
        - border-bottom: 2px solid black;  borda inferior de 2 pixels sólida e preta

    - Width e Height: As propriedades width e height definem a largura e altura de um elemento.

        - width: 200px;  largura de 200 pixels
        - height: 100px;  altura de 100 pixels

    - Margin: A propriedade margin define o espaço externo de um elemento.

        - margin: 20px;  margem de 20 pixels em todos os lados
        - margin: auto;  margem automática, centralizando o elemento
        - margin-top: 10px;  margem superior de 10 pixels

    - Padding: A propriedade padding define o espaço interno de um elemento.
        - padding: 10px;  preenchimento de 10 pixels em todos os lados
        - padding-top: 10px;  preenchimento superior de 10 pixels

    - BoxSizing: A propriedade box-sizing controla como a largura e altura de um elemento são calculadas.

        - box-sizing: content-box;  padrão, largura e altura incluem apenas o conteúdo
        - box-sizing: border-box;  largura e altura incluem o preenchimento e a borda  
        
# Fontes e Textos

    - Fontes: A propriedade font define a fonte de um elemento.

        - font-family: Arial, sans-serif;  define a família da fonte
        - font-size: 16px;  define o tamanho da fonte
        - font-weight: bold;  define o peso da fonte (negrito)
        - font-style: italic;  define o estilo da fonte (itálico)
        - font-variant: small-caps;  define a variante da fonte (caixa baixa)
        - font-stretch: condensed;  define o estiramento da fonte (condensada)

    - Texto: A propriedade text define o estilo do texto de um elemento.

        - color: red;  define a cor do texto
        - text-align: center;  alinha o texto ao centro
        - text-decoration: underline;  sublinha o texto
        - text-transform: uppercase;  transforma o texto em caixa alta
        - letter-spacing: 2px;  define o espaçamento entre letras
        - word-spacing: 5px;  define o espaçamento entre palavras
        - line-height: 1.5;  define a altura da linha

    - Web Fonts: O CSS permite o uso de fontes da web, como Google Fonts.
        No HTML:
        - <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap">  importa a fonte Roboto

        No CSS:
        - @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');  importa a fonte Roboto
        - font-family: 'Roboto', sans-serif;  aplica a fonte Roboto
    
# Cores e Fundos

    - Cores: O CSS suporta várias formas de definir cores.

        - Cores nomeadas: red, blue, green, etc.
        - Cores hexadecimais: #ff0000 (vermelho), #00ff00 (verde), #0000ff (azul)
        - Cores RGB: rgb(255, 0, 0) (vermelho), rgb(0, 255, 0) (verde), rgb(0, 0, 255) (azul)
        - Cores RGBA: rgba(255, 0, 0, 0.5) (vermelho com opacidade de 50%)
        - Cores HSL: hsl(120, 100%, 50%) (verde)
        - Cores HSLA: hsla(120, 100%, 50%, 0.5) (verde com opacidade de 50%)

    - Fundos: A propriedade background define o fundo de um elemento.

        - background-color: red;  define a cor de fundo
        - background-image: url('imagem.jpg');  define a imagem de fundo
        - background-repeat: no-repeat;  não repete a imagem de fundo
        - background-size: cover;  cobre todo o elemento com a imagem de fundo
        - background-position: center;  centraliza a imagem de fundo
        - background-shorthand: background: red url('imagem.jpg') no-repeat center / cover;  define a cor, imagem, repetição e posição de fundo em uma única linha
        
# Layouts

    - Flexbox: O CSS Flexbox é um modelo de layout unidimensional que permite alinhar e distribuir espaço entre itens em um contêiner.
        - display: flex;  ativa o modelo de layout flexível
        - flex-direction: row;  define a direção dos itens (horizontal)
        - justify-content: center;  alinha os itens no centro do contêiner
        - align-items: stretch;  estica os itens para preencher o contêiner
        - flex-wrap: wrap;  permite que os itens se movam para a próxima linha se não houver espaço suficiente

    - Grid: O CSS Grid é um modelo de layout bidimensional que permite criar layouts complexos com linhas e colunas.
        - display: grid;  ativa o modelo de layout em grade
        - grid-template-columns: repeat(3, 1fr);  define três colunas de largura igual
        - grid-template-rows: auto;  define linhas automáticas
        - grid-gap: 10px;  define o espaçamento entre as células da grade
        - grid-area: item1;  define a área ocupada por um item

    - Float: A propriedade float permite que um elemento flutue para a esquerda ou direita, permitindo que o texto flua ao redor dele.
        - float: left;  flutua o elemento para a esquerda
        - float: right;  flutua o elemento para a direita
        - clear: both;  limpa os elementos flutuantes, evitando que o texto flua ao redor deles

# Position

    - A propriedade position controla como um elemento é posicionado na página.
        - static: padrão, o elemento é posicionado de acordo com o fluxo normal do documento
        - relative: o elemento é posicionado em relação à sua posição original
        - absolute: o elemento é posicionado em relação ao seu ancestral mais próximo com position diferente de static
        - fixed: o elemento é posicionado em relação à viewport e não se move ao rolar a página
        - sticky: o elemento é tratado como relative até que atinja um determinado ponto, depois se torna fixed
        - z-index: 10;  define a ordem de empilhamento do elemento (quanto maior o valor, mais acima ele fica)

# Variaveis CSS

    - As variáveis CSS permitem armazenar valores reutilizáveis em todo o CSS.
        - :root { --cor-primaria: #3498db; }  define uma variável chamada cor-primaria
        - background-color: var(--cor-primaria);  usa a variável cor-primaria como cor de fundo
        - As variáveis podem ser usadas para cores, tamanhos, espaçamentos, etc.
        - As variáveis podem ser definidas em qualquer lugar, mas é comum defini-las no :root para torná-las globais.
        - As variáveis podem ser sobrescritas em seletores específicos.
        - Exemplo: 
            - :root { --cor-primaria: #3498db; }
            - .secao { --cor-primaria: #e74c3c; }  sobrescreve a variável cor-primaria apenas dentro da classe secao
            - background-color: var(--cor-primaria);  usa a variável cor-primaria como cor de fundo 

# pseudo-classes e pseudo-elementos

    - Pseudo-classes: As pseudo-classes permitem aplicar estilos a um elemento com base em seu estado ou posição.
        - :hover: aplica estilos quando o mouse passa sobre o elemento
        - :active: aplica estilos quando o elemento é clicado
        - :focus: aplica estilos quando o elemento recebe foco (ex: campo de entrada)
        - :nth-child(n): aplica estilos ao número n filho de um elemento pai
        - :first-child: aplica estilos ao primeiro filho de um elemento pai
        - :last-child: aplica estilos ao último filho de um elemento pai
        - :not(): aplica estilos a elementos que não correspondem a um seletor específico
        - :has(): aplica estilos a elementos que contêm um elemento específico

    - Pseudo-elementos: Os pseudo-elementos permitem aplicar estilos a partes específicas de um elemento.
        - ::before: insere conteúdo antes do conteúdo do elemento
        - ::after: insere conteúdo após o conteúdo do elemento
        - ::first-letter: aplica estilos à primeira letra do conteúdo do elemento
        - ::first-line: aplica estilos à primeira linha do conteúdo do elemento

*/